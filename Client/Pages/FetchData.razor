@page "/fetchdata"
@using StronglyTypedApi.Shared
@inject IWeatherForecastApi Api

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<div class="form-group">
    <label for="days">NUmber of days to fetch</label>
    <InputNumber id="days" @bind-Value="@_days" class="form-control"/>
</div>
<button class="btn btn-primary my-4" @onclick="Fetch">Fetch data</button>

@if (_errorTitle != null)
{
    <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">@_errorTitle</h4>
        <p>@_errorDetails</p>
    </div>
}

@if (_loading)
{
    <p><em>Loading...</em></p>
}
@if(_forecasts != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? _forecasts;
    private string? _errorTitle, _errorDetails;
    private bool _loading = false;
    private int _days = 5;

    private async Task Fetch()
    {
        _errorTitle = null;
        try
        {
            _loading = true;
            _forecasts = await Api.Fetch(new WeatherForecastRequest()
            {
                    Days = _days
            }, CancellationToken.None);
        }
        catch (HttpRequestException re)
        {
            _errorTitle = $"HTTP {(int?)re.StatusCode}/{re.StatusCode}";
            _errorDetails = re.Message;
        }
        catch (Exception ex)
        {
            _errorTitle = ex.GetType().FullName;
            _errorDetails = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }
}
